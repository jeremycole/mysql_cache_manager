#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
require 'getoptlong'
require 'ostruct'
require 'inifile'
require 'mysql_cache_manager'

def usage(exit_code, message = nil)
  print "Error: #{message}\n\n" unless message.nil?

  print <<'END_OF_USAGE'

Usage:

mysql_cache_manager (--save|--restore) [options] <save file>

Arguments:

--save
  Perform a dump and save of the buffer pool cache to the specified file.  
  Cannot be used in conjunction with --restore.

--restore
  Perform a reload of the buffer pool cache from the specified file.
  Cannot be used in conjunction with --save

Options:

  --help | -?
    Print this message.

  --verbose
    Print verbose messages.

  --image-format
    Default: pstore
    Specify the storage backend to use for the cache image.  Currently, only sqlite3 and pstore are supported.

  --mysql-host
    Remote host for mysql connection.

  --mysql-user
    User for mysql connection.

  --mysql-password
    Password for mysql connection.

  --mysql-port
    Port for mysql connection.

  --batch-size
    Specifies the size of each "chunk" of pages to be dumped.

END_OF_USAGE

  exit exit_code
end

@options = OpenStruct.new
@options.verbose            = false
@options.mode               = nil
@options.mode_options       = 0
@options.image_format       = "pstore"
@options.mysql_host         = "localhost"
@options.mysql_user         = nil
@options.mysql_password     = nil
@options.mysql_port         = 3306
@options.batch_size         = 1000

# Parse local .my.cnf if present
if File.exists?(File.expand_path("~/.my.cnf"))
  my_cnf = IniFile.load(File.expand_path("~/.my.cnf"))
  section = my_cnf['client']
  unless section['user'].nil?
    @options.mysql_user = section['user']
  end
  unless section['password'].nil?
    @options.mysql_password = section['password']
  end
end

getopt = GetoptLong.new(
  [ "--help",             "-?",     GetoptLong::NO_ARGUMENT ],
  [ "--verbose",          "-v",     GetoptLong::NO_ARGUMENT ],
  [ "--save",             "-s",     GetoptLong::NO_ARGUMENT ],
  [ "--restore",          "-r",     GetoptLong::NO_ARGUMENT ],
  [ "--image-format",     "-i",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--mysql-host",       "-h",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--mysql-user",       "-u",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--mysql-password",   "-p",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--mysql-port",       "-P",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--batch-size",       "-b",     GetoptLong::REQUIRED_ARGUMENT ]
)

getopt.each do |opt, arg|
  case opt
    when "--help"
      usage 0
    when "--verbose"
      @options.verbose = true
    when "--save"
      @options.mode_options += 1
      @options.mode = :save
    when "--restore"
      @options.mode_options += 1
      @options.mode = :restore
    when "--image-format"
      @options.image_format = arg
    when "--mysql-host"
      @options.mysql_host = arg
    when "--mysql-user"
      @options.mysql_user = arg
    when "--mysql-password"
      @options.mysql_password = arg
    when "--mysql-port"
      @options.mysql_port = arg.to_i
    when "--batch-size"
      @options.batch_size = arg.to_i
  end
end

if @options.mode.nil? or @options.mode_options != 1
  usage 1, "Exactly one mode (--save, --restore) must be specified"
end

if ARGV.size != 1
  usage 1, "A save file name must be provided"
end

def log(message)
  if @options.verbose
    time = Time.now.strftime("%F %T ")
    puts time + message
  end
end

def save(cache_manager)
  cache_manager.save_cache(@options.save_file)
end

def restore(cache_manager)
  status_start = cache_manager.innodb_buffer_pool.status
  time_start = Time.now.to_f
  log "Starting restore from %s" % [@options.save_file]
  total_pages_fetched = cache_manager.restore_cache(@options.save_file, @options.batch_size) do
    |mysql, pages_fetched, pages_attempted|
    log "Fetched %i pages\n" % [
      pages_fetched,
    ]
  end
  status_finish = cache_manager.innodb_buffer_pool.status
  time_finish = Time.now.to_f
  time_delta = (time_finish - time_start)

  log "Finished restore from %s in %0.2f seconds" % [
    @options.save_file,
    time_delta,
  ]

  puts
  puts "Statistics:"
  puts "  Run time (s):             %10.2f" % [time_delta]
  puts "  Fetch time (s):           %10.2f" % [cache_manager.timing["fetch"]]
  puts "  Fetch speed (pages/s):    %10.2f" % [
    total_pages_fetched / time_delta
  ]
  data_read_delta = (status_finish["data_read"] - status_start["data_read"])
  puts "  Data read (GB):           %10.2f" % [
    data_read_delta / (1024**3)
  ]
  puts "  Data read (MB/s):         %10.2f" % [
    data_read_delta / (1024**2) / time_delta
  ]
  puts "  Buffer pool data start:   %10.2f%%" % [
    100.0 * (status_start["buffer_pool_pages_data"].to_f /
              status_start["buffer_pool_pages_total"].to_f)
  ]
  puts "  Buffer pool data finish:  %10.2f%%" % [
    100.0 * (status_finish["buffer_pool_pages_data"].to_f /
              status_finish["buffer_pool_pages_total"].to_f)
  ]
  puts "  Buffer pool restored:     %10.2f%%" % [
    100.0 * (status_finish["buffer_pool_pages_data"].to_f /
              cache_manager.image.metadata["buffer_pool_pages_data"].to_f)
  ]
  puts "  Timings (s):"
  cache_manager.timing.each do |metric, time|
    puts "    %-10s: %10.2f" % [metric, time]
  end
end

@options.save_file = ARGV.shift

image_format_names = MysqlCacheManager::CacheImage.constants.select do |c|
  c.downcase == @options.image_format.downcase
end

if image_format_names.empty?
  usage 1, "Unable to find cache image class '%s'; valid classes are: %s" % [
    @options.image_format,
    MysqlCacheManager::CacheImage.constants.join(", "),
  ]
end

cache_image_class = MysqlCacheManager::CacheImage.const_get(image_format_names.first)

cache_manager = MysqlCacheManager::CacheManager.new(
  cache_image_class,
  @options.mysql_host,
  @options.mysql_user,
  @options.mysql_password,
  @options.mysql_port
)

case @options.mode
  when :save
    save(cache_manager)
  when :restore
    restore(cache_manager)
end
